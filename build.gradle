import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.*
 
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.dm.gradle:gradle-bundle-plugin:0.8.5', 
        'net.ltgt.gradle:gradle-apt-plugin:0.9', 
        'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}

plugins {
        id 'org.sonarqube' version '2.7'
}

repositories {
	mavenLocal()
    maven {
        url "https://repository-cdn.liferay.com/nexus/content/groups/public"
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.dm.bundle'
apply plugin: 'net.ltgt.apt'
apply plugin: com.xtivia.swaggercodegen.Plugin
apply plugin: 'maven'

group = 'com.spire'
def jackson_version = '2.7.4'
def version = '1.0.0'

sourceCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','build/openapi/src/gen/java']
        }
    }
}

dependencies {

    compileOnly 'com.liferay.portal:com.liferay.portal.kernel:5.4.0',
            'com.liferay:com.liferay.portal.configuration.metatype:2.0.0',
            'com.liferay:com.liferay.journal.api:5.4.0',
            'javax.ws.rs:javax.ws.rs-api:2.0.1',
            'javax.portlet:portlet-api:2.0',
            'javax.servlet:servlet-api:2.5',
            'biz.aQute.bnd:biz.aQute.bndlib:3.1.0',
            'org.osgi:org.osgi.compendium:5.0.0',
            'io.swagger.core.v3:swagger-annotations:2.1.4',
            'io.swagger.core.v3:swagger-models:2.1.4',
            'org.glassfish.jersey.media:jersey-media-multipart:2.17',
            'javax.mail:mail:1.4',
            'org.hibernate:hibernate-osgi:5.2.6.Final',
            'org.hibernate:hibernate-core:5.2.6.Final',
            'javax.validation:validation-api:2.0.1.Final',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.2'

    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:'+jackson_version,
    		'io.swagger.core.v3:swagger-annotations:2.1.4',
            'io.swagger.core.v3:swagger-models:2.1.4',
            'org.apache.httpcomponents:httpclient:4.5.2',
            'org.apache.commons:commons-lang3:3.4',
            'org.mapstruct:mapstruct-jdk8:1.0.0.Final',            
            'org.apache.tomcat:tomcat-dbcp:9.0.0.M15',
            'com.liferay:com.liferay.petra.content:1.0.1'

    apt 'org.mapstruct:mapstruct-processor:1.0.0.Final'
   
}

/*
The logic below is used during the bundle task that generates the OSGi JAR. It allows us to
automatically include dependencies from the 'compile' configuration (both in terms of packaging
and classpath) without having to manage continuous updating of a bnd.bnd file
*/
def bundleClassPath() {
    def list = ['.']
    configurations.compile.each {
        list += 'OSGI-INF/lib/' + it.name
    }
    return list.join(',')
}

def includeResource() {
    def list = []
    configurations.compile.each {
        list += 'OSGI-INF/lib/' + it.name + "=" + it.path
    }
    return list.join(',')
}

bundle {
    instructions << [
            'Bundle-Version'   : version,
            '-metatype'        : '*',
            '-buildpath'       : 'osgi.annotation; version=6.0.1,osgi.core; version=6.0,osgi.cmpn; version=6.0',
            'Export-Package'   : 'com.spire.services.security,com.spire.services.security.impl',
            'Import-Package'   : '!org.apache.tomcat.dbcp.pool2,' +
			'!org.apache.tomcat.dbcp.pool2.impl,!org.apache.avalon.framework.logger,!org.apache.log,javax.servlet.http,' +
			'javax.servlet,org.slf4j,' +
			'com.spire.*;version="1,2,3,4,5",com.oracle.ouaf.*;version="1,2,3,4,5",' +
			'org.datacontract.schemas.*;version="1,2,3,4,5",org.tempuri.*;version="1,2,3,4,5",' +
			'com.laclededgas.*;version="1,2,3,4,5",*',
            'Bundle-ClassPath' : bundleClassPath(),
            '-includeresource' : includeResource()
    ]
}

 // Build the Swagger API and model objects (only clean output directory on first one)
task openApiServiceSecurity(type: com.xtivia.swaggercodegen.CodeGenTask) {
	swagger = new com.xtivia.swaggercodegen.PluginExtension()
	swagger.inputSpec = file('user.yaml')
	swagger.output = 'build/openapi'
	swagger.language = 'jaxrs-jersey'
	swagger.cleanOutputDir = true
	swagger.additionalProperties = [
		'invokerPackage' : 'com.spire.generated.security.jaxrs',
		'modelPackage' : 'com.spire.generated.jaxrs.model',
		'apiPackage' : 'com.spire.generated.security.jaxrs.api',
		'dateLibrary' : 'java8',
		'interfaceOnly' : 'true'
	]
}

task deploy(overwrite:true, type:com.xtivia.subprojects.DeployTask, dependsOn: 'jar') {}

compileJava.dependsOn tasks.findAll { task -> task.name.startsWith('openApiService') };